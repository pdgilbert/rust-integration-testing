## Notes on various sensor crates

To simplify testing the examples *semi* use only the sensor crate and report results
with semihosting. This means the example does not need ssd or anything that would make
the example actually useable. 

At present there appears to be a run time bug in hal stm32f4xx affecting I2C initialization.

The crate xca9548a provides multiplexing of sensors with the same address.
It is now converted to embedded-hal v1.0.0. That seems to mean that
crates for devices attached to the multiplexer also need to use eh-1.
(At least it is difficult if not impossible when they use older eh.
The problem is with trait bounds not being satisfied, which appears to come
from having two versions of eh.)

So, for multiplexing a sensor crates should:

 - Be using eh-1 and be no_std.
 - The binary should not be overly big, so other things can also be done on an MCU with limited flash.
 - Sensor intialization should return a Result so that it is posible to identify
     when some sensors are not attached.
 - Allow for software reset so individual sensors can be reset without a power cycle.
 - Syncronous (blocking) is necessary (at the moment because of rtic difficulties) but
     the feature of getting both sync and async from the same crate is nice.
 - Preferably the sensor should borrow rather than consume delay. If the delay is
   consumed then with multiplexing a large number of delays are used. This can
   be done with cortex_m::asm::delay but that adds unnecessary complication.
 - It would be nice if there were a release version rather than just github.


## issues as of Dec. 2024.By above criteria:

## AHT10 - There are not yet any eh-1 syncronous/blocking crates. 
      - Crate aht10-async (https://github.com/jneem/aht10-async)
            uses  embedded-hal-async = "1.0.0"  but is only async.
  
## AHT20
###   aht20 used here as aht20-bl (https://github.com/blueluna/aht20) uses eh-1 but a Result not returned
     so it is difficult for xca9548a use. (All sensors must be present.) Also it consumes delay.  

        Example aht20-bl-semi compiles with stm32f1xx (bluepill), stm32f4xx (blackpill stm32f411) 
            and stm32g4xx (stm32g474xE).
        Example aht20-bl-semi run fails on stm32f1xx (bluepill), stm32f4xx (blackpill stm32f411).
   *    Example aht20-bl-semi runs with stm32g4xx on stm32g474xE. 

        Example xca9548a-aht20-bl compiles with stm32f1xx (bluepill), stm32f4xx (blackpill stm32f401),
            and stm32g4xx (stm32g474xE).
        Example xca9548a-aht20-bl fails on stm32f4xx (blackpill stm32f401). 
            (in xca9548a-aht20-bl loop at i=0  match sens.read() { 


###  embedded-aht20  (https://github.com/ghismary/embedded-aht20) uses eh-1, and
     returns Result, and has feature option for sync or async. It consumes delay.

        Example aht20-em-semi compiles with stm32f1xx (bluepill), stm32f4xx (blackpill stm32f411/401) 
            and stm32g4xx (stm32g474xE).
        Example aht20-em-semi run fails on stm32f1xx (bluepill), stm32f4xx (blackpill stm32f401).
   *    Example aht20-em-semi runs with stm32g4xx on stm32g474xE. 

        Example xca9548a-aht20-em compiles with stm32f1xx (bluepill), stm32f4xx (blackpill stm32f401),
            and stm32g4xx (stm32g474xE).
        Example xca9548a-aht20-em fails on stm32f4xx (blackpill stm32f401). (in loop at i=0  Aht20::new(prt, .. 
             in embedded_aht20::Aht20<xca9548a::p* L132  PC: 0x8006822
                  132  while !dev.check_status().await?.is_calibrated() {
                   In: embedded_aht20::Aht20<xca9548a::p* L208  PC: 0x80066e0 
                  208    self.i2c 


###  aht20-driver (https://github.com/anglerud/aht20-driver) uses eh-1, and
     does not consume delay. Result returned by .init method. It has an option to use
     Integer rather than Floating point. It is only sync.

        Example aht20-dr-semi compiles with stm32f1xx (bluepill), stm32f4xx (blackpill stm32f411) 
            and stm32g4xx (stm32g474xE).
   *    Example aht20-dr-semi runs with stm32g4xx (stm32g474xE). 
        Example aht20-dr-semi run fails on stm32f1xx (bluepill), stm32f4xx (blackpill stm32f401).



### AHT21 - There are not yet any eh-1 crates. 



### SHTC3  shtcx =  { git = "https://github.com/dbrgn/shtcx-rs" }  Uses eh-1.
        A Result is returned by .wakeup(). Does not consumes delay.

   *    Example shtcx-semi Compiles and runs on blackpill stm32f411. 
        Example shtcx-semi Compiles on stm32g4xx (stm32g474xE) but run panicked at shtcx-semi.rs:86:65:
                     Normal mode measurement failed: I2c(Nack)
        Example shtcx-semi Compiles on stm32f1xx (bluepill) but run panicked after Sensor started.


### SHT3x    embedded-sht3x  https://gitlab.com/ghislainmary/embedded-sht3x/   Uses eh-1
        but a Result not returned so it is difficult for xca9548a use.  Also it consumes delay.

   *    Example sht30-em-semi compiles and runs on blackpill stm32f411.
        Example sht30-em-semi compiles on stm32g4xx (stm32g474xE) but run panicked after sen.measure(). 
        Example sht30-em-semi compiles on stm32f1xx (bluepill) but run panicked after sen.measure().


### HDC1080
embedded-hdc1080-rs = { git = "https://github.com/maxmarvil/hdc1080-embedded-rs" } # eh 0.2.6




## Debugging notes:

### embedded-aht20
extended-r Remote target In: stm32f4xx_hal::i2c::I2c<stm32f4_s* L487  PC: 0x80090b2
487          self.write_wo_prepare(bytes)


### aht20-bl-semi
break /home/paul/githubClones/stm32f4xx-hal/src/i2c.rs:439
break /home/paul/githubClones/stm32f4xx-hal/src/i2c.rs:175   ??



### aht20-dr-semi
extended-r Remote target In: aht20_driver::AHT20<stm32f4xx_hal* L361  PC: 0x800268e
sextended-r Remote target In: aht20_driver::AHT20<stm32f4xx_hal* L389  PC: 0x8002562 
389          self.i2c                                                     
390              .read(self.address, &mut read_buffer)       


        Example xca9548a-aht20-dr compiles with stm32f1xx (bluepill), stm32f4xx (blackpill stm32f411) 
            and stm32g4xx (stm32g474xE).
        Example xca9548a-aht20-dr fails on stm32f4xx (blackpill stm32f401). 

extended-r Remote target In: stm32f4xx_hal::i2c::I2c<stm32f4_s* L487  PC: 0x8004e1

485      pub fn write(&mut self, addr: impl Into<Address>, bytes: &[u8]) -> 
486          self.prepare_write(addr.into())?;                              
487          self.write_wo_prepare(bytes)                                   
488      }                                        


 aht20-dr-semi
break /home/paul/githubClones/stm32f4xx-hal/src/i2c.rs:439


### aht20-em-semi
break /home/paul/githubClones/stm32f4xx-hal/src/i2c.rs:334

ignore breakpoint-number COUNT
ignore 5 200


###SHT3
embedded-sht3x   =  https://gitlab.com/ghislainmary/embedded-sht3x/
break ...stry/src/index.crates.io-6f17d22bba15001f/embedded-sht3x-0.1.0/src/lib.rs:216

xca9548a-aht20-dr on g4
disappears after sensor 0
 at match z.init(&mut delay)
panicked at examples/misc-i2c-drivers/xca9548a-aht20-dr.rs:132:20:
called `Result::unwrap()` on an `Err` value: BusWriteError

xca9548a-aht20-em on g4
disappears after prt 0
embedded-aht20-0.1.3/src/lib.rs
 >   132          while !dev.check_status().await?.is_calibrated() { 
 >>   208          self.i2c     

xca9548a-rs-ae9747938cfab30c/f7ef250/src/device_impl.rs\u2500
>    70                  f(dev) 




## Other notes:

#aht10  = { git = "https://github.com/heyitsanthony/aht10" }  #original but not being updated.
aht10   = { git = "https://github.com/andy31415/aht10", branch = "fix_status_check" } # not eh-1
#aht10-async           = { git = "https://github.com/jneem/aht10-async" } # aysnc only

#aht20           = { git = "https://github.com/mythmon/aht20" } # this does not appears to be actively updated
#aht20           = { git = "https://github.com/nim65s/aht20" }  # eh 0.2.6


//!  As of March 17, 2024 example xca9548a  compiled and runs on and ran blackpill stm32f401 both with and without --release
//!    using up to 4 AHT10s all on the first xca9548a.
//!    Testing with DisplaySize128x32 and then changed to DisplaySize128x64 rotated. 
//!    Works with USB dongle power, USB 5v battery power,  and 3.2v battery power,
//!    using 4 sensors on long wires.
