



///////////////////////////////   /////////////////////////////// 

Using I2C1 for oled display and  I2C2 for sensors (eg ccs811).
The hardware configuration for the STM32F103 "Bluepill" and  STM32F401 "Blackpill" boards use 
  I2C1 for oled:    PB8 for SCL, PB9 for SDA.
  I2C2 for sensor: PB10 for SCL, PB3 for SDA,
   ccs811:  VCC 1.8 to 3.7v
   WAKE  GND to communicate. VCC puts sensor to sleep. (GND for this example)
   RST pull to GND to resets sensor (NC (floating)  for this example)
   INT  hardware interrupt output. (no connection for this example)
   ADDR altrnate address if available. Low hex 0x5A, high  hex 0x5B.

Above is a common test setup. 
Beware that projects/temperature-display and projects/temperature-display_4jst use
I2C1 for sensors and I2C2 for display.

Below are pin mappings intended to reduce re-wiring for testing different examples.

///////////////////////////////  stm32f1xx  /////////////////////////////// 

TIM3   delay =  dp.TIM3.delay::<1000000_u32>(&clocks);

PC13 as LEDPIN   gpiox.pc13.into_push_pull_output(&mut gpiox.crh);
 
PA8     opendrain     gpioa.pa8.into_open_drain_output(&mut gpioa.crh);

        
PB6    scl1   dp.I2C1,  gpiob.pb8.into_alternate_open_drain(&mut gpiob.crl), 
PB7    sda1             gpiob.pb9.into_alternate_open_drain(&mut gpiob.crl)

PB10   scl2   dp.I2C2,  gpiob.pb10.into_alternate_open_drain(&mut gpiob.crh),
PB11   sda2             gpiob.pb11.into_alternate_open_drain(&mut gpiob.crh),

PA9    tx1    dp.USART1, (gpioa.pa9.into_alternate_push_pull(&mut gpioa.crh),
PA10   rx1                gpioa.pa10,

PA2    tx2    dp.USART2  gpioa.pa2.into_alternate_push_pull(&mut gpiob.crh), 
PA3    rx2               gpioa.pa3,  // may need alt

dp.SPI1,
        (
PA5     sck                gpioa.pa5.into_alternate_push_pull(&mut gpioa.crl), //   sck 
PA6     miso               gpioa.pa6.into_floating_input(&mut gpioa.crl),      //   miso
PA7     mosi              gpioa.pa7.into_alternate_push_pull(&mut gpioa.crl), //   mosi


PA11  UNTESTED   CsPin     Sx127x::spi(     gpioa.pa11.into_push_pull_output(&mut gpioa.crl), //CsPin        
PB8     BusyPin         gpiob.pb8.into_floating_input(&mut gpiob.crh),   //BusyPin  DIO0
PB9     ReadyPin        gpiob.pb9.into_floating_input(&mut gpiob.crh),   //ReadyPin DIO1
PA0     ResetPin         gpioa.pa0.into_push_pull_output(&mut gpioa.crl), //ResetPin     

PA1     adc1  AdcSensor1Type    ch:   gpioa.pa1.into_analog(&mut gpioa.crl), //channel


PC13
PB6 PB7 PB8 PB9 PB10 PB11
PA0 PA1 PA2 PA3 PA5 PA6  PA7  PA8  PA9 PA10 PA11 


///////////////////////////////  stm32f4xx  /////////////////////////////// 

TIM5   delay = dp.TIM5.delay::<1000000_u32>(&clocks);

PC13   as LEDPIN gpiox.pc13.into_push_pull_output();

PA8     opendrain      gpioa.pa8.into_open_drain_output();

PB8    scl1       I2C1.i2c(     (gpiob.pb8.into_alternate_open_drain(),
PB9    sda1                      gpiob.pb9.into_alternate_open_drain()  
                                      ), 400.kHz(), &clocks);

PB10   scl2       I2C2.i2c(     (gpiob.pb10.into_alternate().set_open_drain(), 
PB3    sda2                      gpiob.pb3.into_alternate().set_open_drain() 
                                      ), 400.kHz(), 

PA9    tx1           USART1    gpioa.pa9.into_alternate(), 
PA10   rx1                     gpioa.pa10.into_alternate(),
                                Config::default().baudrate(9600.bps()),

PA2    tx2           USART2    gpioa.pa2.into_alternate(), 
PA3    rx2                     gpioa.pa3.into_alternate(), 
                                Config::default().baudrate(9600.bps()),

PA11   tx3    on     USART6    gpioa.pa11.into_alternate(),  TRY TO RESOLVE CONFILICT WITH CsPin below
PA12   tx3                     gpioa.pa12.into_alternate(),

PA5     sck       dp.SPI1      gpioa.pa5.into_alternate(), // sck  
PA6     miso                   gpioa.pa6.into_alternate(), // miso 
PA7     mosi                   gpioa.pa7.into_alternate(), // mosi 
                                MODE,  8.MHz(),

PA11    CsPin     Sx127x::spi( gpioa.pa11.into_push_pull_output(), //CsPin         
PB4     BusyPin                gpiob.pb8.into_floating_input(),   //BusyPin  DI00 triggers RxDone/TxDone status.           CHANGED
PB5     ReadyPin               gpiob.pb9.into_floating_input(),   //ReadyPin DI01 triggers RxTimeout and other errors status. CHANGED
PA0     ResetPin               gpioa.pa0.into_push_pull_output(), //ResetPin      
                                    delay, &CONFIG_RADIO,  ).unwrap(); // should handle error

PA1     adc1  AdcSensor1Type    ch:  gpioa.pa1.into_analog(),

PC13
PB3 PB8 PB9 PB10
PA0 PA1 PA2 PA3 PA5 PA6 PA7 PA8  PA9 PA10 PA11


///////////////////////////////  stm32g4xx  /////////////////////////////// 

TIM5   let timer2 = Timer::new(dp.TIM5, &clocks);
       let delay = DelayFromCountDownTimer::new(timer2.start_count_down(100.millis()));

PC6   as LEDPIN gpiox.pc13.into_push_pull_output(); //NOT SURE WHAT THIS SHOULD BE

PB7    opendrain             gpiob.pb7.into_open_drain_output();          

PB8    scl1        I2C1      gpiob.pb8.into_alternate_open_drain(), 
PB9    sda1        I2C1      gpiob.pb9.into_alternate_open_drain(),  
                               Config::new(400.kHz()), 

PC4    scl2        I2C2      gpioa.pa9.into_alternate_open_drain(),      
PA8    sda2        I2C2      gpioa.pa8.into_alternate_open_drain(),  
                                Config::new(400.kHz()), 

PA9    tx1         USART1     gpioa.pa9.into_alternate(), 
PA10   rx1                    gpioa.pa10.into_alternate(), 
                               FullConfig::default().baudrate(9600.bps()), &mut rcc).unwrap().split();

PA2    tx2         USART2     gpioa.pa2.into_alternate(), 
PA3    rx2                    gpioa.pa3.into_alternate(),
                               FullConfig::default().baudrate(9600.bps()), &mut rcc).unwrap().split();

PB10    tx3         USART3      gpiob.pb10.into_alternate(),
PB11    rx3                     gpiob.pb11.into_alternate(), 

PA5     sck        SPI1.spi(   (gpioa.pa5.into_alternate(), // sck 
PA6     miso                    gpioa.pa6.into_alternate(), // miso
PA7     mosi                    gpioa.pa7.into_alternate(), // mosi
                                ), MODE_0, 400.kHz(),  &mut rcc, );

PA11    CsPin        Sx127x     gpioa.pa11.into_push_pull_output(), //CsPin         
PB4     BusyPin                 gpiob.pb8.into_floating_input(),   //BusyPin  DI00            CHANGED
PB5     ReadyPin                gpiob.pb9.into_floating_input(),   //ReadyPin DI01            CHANGED
PA0     ResetPin                gpioa.pa0.into_push_pull_output(), //ResetPin      
                                delay,  &CONFIG_RADIO, ).unwrap(); // should handle error

PA1     adc1  AdcSensor1Type    ch:  gpioa.pa1.into_analog(),

PC4, PC13
PB4, PB5, PB7, PB8, PB9, PB10, PB11    
PA0, PA1, PA2, PA3, PA5, PA6, PA7, PA8, PA9, PA10, PA11
    


///////////////////////////////  stm32h7xx  /////////////////////////////// 

TIM5   delay = dp.TIM5.delay::<1000000_u32>(&clocks);

PC13   as LEDPIN gpiox.pc13.into_push_pull_output();

PA8     opendrain      gpioa.pa8.into_open_drain_output();

PB9    sda1       I2C1.i2c(     (gpiob.pb8.into_alternate_open_drain(),  // scl
PB8    scl1                      gpiob.pb9.into_alternate_open_drain()   // sda
                                      ), 400.kHz(), &clocks);

PF0   sda2       I2C2.i2c(     (gpiof.pf0.into_alternate().set_open_drain(), // scl
PF1    scl2                      gpiof.pf1.into_alternate().set_open_drain()   // sda
                                      ), 400.kHz(), 

PA9    tx1        dp.USART1    gpioa.pa9.into_alternate(), 
PA10   rx1                     gpioa.pa10.into_alternate(),
                                Config::default().baudrate(9600.bps()),

PA2    tx2        dp.USART2    gpioa.pa2.into_alternate(), 
PA3    rx2                     gpioa.pa3.into_alternate(), 
                                 Config::default().baudrate(9600.bps()),

PA5     sck       dp.SPI1      gpioa.pa5.into_alternate(), // sck  
PA6     miso                   gpioa.pa6.into_alternate(), // miso 
PA7     mosi                   gpioa.pa7.into_alternate(), // mosi 
                                MODE,  8.MHz(),

PA1     CsPin     Sx127x::spi( gpioa.pa1.into_push_pull_output(), //CsPin         
PB4     BusyPin                gpiob.pb8.into_floating_input(),   //BusyPin  DI00 triggers RxDone/TxDone status.           CHANGED
PB5     ReadyPin               gpiob.pb9.into_floating_input(),   //ReadyPin DI01 triggers RxTimeout and other errors status. CHANGED
PA0     ResetPin               gpioa.pa0.into_push_pull_output(), //ResetPin      
                                    delay, &CONFIG_RADIO,  ).unwrap(); // should handle error

PF0, PF1
PC13
PB4, PB5, PB8, PB9
PA0, PA1, PA2, PA3, PA5, PA6, PA7, PA8,  PA9, PA10

    
